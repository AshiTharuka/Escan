
    import java.io.DataInputStream;
    public class message extends JFrame implements ActionListener
    {
    //final static  String    serverIPname = “192.168.0.101”;     // server IP name
    final static  String    serverIPname = “127.0.0.1”;     // server IP name
    final static  int       serverPort   = 8888;                      // server port number
    JButton SUBMIT;
    JPanel panel;
    JLabel label1;
    final JTextField  text1;
    String encryptedData;
     public message()
      {
     label1 = new JLabel();
     label1.setText(“Message:”);
     text1 = new JTextField(15);
     SUBMIT=new JButton(“SUBMIT”);
       panel=new JPanel(new GridLayout(3,1));
       panel.add(label1);
       panel.add(text1);
       panel.add(SUBMIT);
       add(panel,BorderLayout.CENTER);
       SUBMIT.addActionListener(this);
       setTitle(“Send Message to Server”);
       setDefaultCloseOperation(javax.swing.
             WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(“Welcome”);
          setSize(400, 200);
         }
     public void actionPerformed(ActionEvent ae)
     {
    // This is where we’ll read the key from or write it to
     File keyfile = new File(“D:\\workspace\\server\\key.txt”);
     //String sb64 = null;
     String userMessage = text1.getText();
     String hashValue = userMessage;
         java.net.Socket         sock = null;                              // Socket object for communicating
     java.io.PrintWriter     pw   = null;                              // socket output to server
     java.io.BufferedReader  br   = null;                              // socket input from server
    //generate hash value of the user message…….
              try{
     MessageDigest md = MessageDigest.getInstance(“MD5”);
              md.update(hashValue.getBytes());
              byte[] digest = md.digest();
              StringBuffer hexString = new StringBuffer();
              for (int i = 0; i < digest.length; i++) {
                  hashValue = Integer.toHexString(0xFF & digest[i]);
                  if (hashValue.length() < 2) {
                      hashValue = “0” + hashValue;
                  }
                  hexString.append(hashValue);
              }
              hashValue = hexString.toString();
              }catch (Throwable e) {
               System.out.println(“Error ” + e.getMessage());
               e.printStackTrace();
         }
    //get shared secret key….
    SecretKey key = null;
    try {
    key = readKey(keyfile);
    } catch (InvalidKeyException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (NoSuchAlgorithmException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (InvalidKeySpecException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (IOException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    }
    //encrypt data……
       try {
    //byte[] encryptedByteData = null;
       //encryptedByteData = encrypt(key, userMessage.getBytes());
       encryptedData = encrypt(key, userMessage);
       //encryptedData = encryptedByteData.toString();
    } catch (InvalidKeyException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (NoSuchAlgorithmException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (NoSuchPaddingException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (IllegalBlockSizeException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (BadPaddingException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    } catch (IOException e1) {
    // TODO Auto-generated catch block
    e1.printStackTrace();
    }
     String transmittedData = encryptedData + hashValue;
     try {
       //opening socket with the server…….
               sock = new java.net.Socket(serverIPname,serverPort);       // create socket and connect
               pw   = new java.io.PrintWriter(sock.getOutputStream(), true);  // create reader and writer
               br   = new java.io.BufferedReader(new java.io.InputStreamReader(sock.getInputStream()));
               System.out.println(“Connected to Server”);
               pw.println(transmittedData);                      // send msg to the server
               System.out.println(“Sent message to server”);
               pw.close();                                                 // close everything
               br.close();
               sock.close();
         } catch (Throwable e) {
               System.out.println(“Error ” + e.getMessage());
               e.printStackTrace();
         }
       }
     /** Read a TripleDES secret key from the specified file */
     public static SecretKey readKey(File f) throws IOException,
         NoSuchAlgorithmException, InvalidKeyException,
         InvalidKeySpecException {
       // Read the raw bytes from the keyfile
       DataInputStream in = new DataInputStream(new FileInputStream(f));
       byte[] rawkey = new byte[(int) f.length()];
       in.readFully(rawkey);
       in.close();
       // Convert the raw bytes to a secret key like this
       //DESedeKeySpec keyspec = new DESedeKeySpec(rawkey);
       DESKeySpec keyspec = new DESKeySpec(rawkey);
       SecretKeyFactory keyfactory = SecretKeyFactory.getInstance(“DES”);
       SecretKey key = keyfactory.generateSecret(keyspec);
       return key;
     }
     public static String encrypt(SecretKey key, String msg)
         throws NoSuchAlgorithmException, InvalidKeyException,
         NoSuchPaddingException, IOException, IllegalBlockSizeException, BadPaddingException {
          // get a DES cipher
    Cipher cipher = Cipher.getInstance(“DES/ECB/PKCS5Padding”);
    // Encryption mode initialization…….
    cipher.init(Cipher.ENCRYPT_MODE, key);
    //transform the user text into unicode transformation……..
    byte[] unicodeTransformedUserText= msg.getBytes(“UTF8”);
    //encrypt the unicode transformed user text by using the secret key…………
    byte[] cipherText = cipher.doFinal(unicodeTransformedUserText);
    //displaying the encrypted message…
    System.out.println(“Encrypted Message:” + cipherText);
    //encode the encrypted text by using Base64 encoding………
    String Base64Encode = new sun.misc.BASE64Encoder().encode(cipherText);
    System.out.println(“Encoded Message:” + Base64Encode);
    return Base64Encode;
     }
     }
